@model List<HSM2.Models.HsmData>

@{
    ViewData["Title"] = "HSM";
}

@* <br />
<div class="text-center mb-4">
    <h1 class="display-4 text-primary" style="font-weight: bold;">Gestión HSM</h1>
    <p class="text-muted">Filtra y encuentra los datos que necesitas de manera rápida y eficiente.</p>
</div>

<div class="container">
    <div class="card shadow-sm p-4 mb-4">
        <div class="row g-3">
            <!-- Filtro por texto (excluyendo fecha) -->
            <div class="col-md-6">
                <label for="searchInput" class="form-label">Buscar por cualquier campo</label>
                <input type="text" id="searchInput" class="form-control border-primary" placeholder="Ingresa texto para buscar">
            </div>

            <!-- Filtro de fecha -->
            <div class="col-md-6">
                <label for="dateInput" class="form-label">Buscar por fecha</label>
                <input type="date" id="dateInput" class="form-control border-primary">
            </div>
        </div>

        <div class="row mt-3">
            <!-- Botón de Buscar -->
            <div class="col-md-6">
                <button id="searchButton" class="btn btn-primary w-100">Buscar</button>
            </div>
            <!-- Botón de Limpiar -->
            <div class="col-md-6">
                <button id="clearButton" class="btn btn-outline-secondary w-100">Limpiar</button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0 text-center">Resultados</h4>
        </div>
        <div class="card-body p-0">
            <table class="table table-striped table-bordered table-hover table-responsive">
                <thead class="bg-light">
                    <tr class="text-center">
                        <th >SERIAL HSM</th>
                        <th>REG</th>
                        <th>SGC</th>
                        <th>SGN</th>
                        <th>BDT</th>
                        <th>KRN</th>
                        <th>ACT</th>
                        <th>CLM</th>
                        <th>CLU</th>
                        <th>DKG</th>
                    </tr>
                </thead>
                <tbody id="dataRows">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.SerialHsm</td>
                            <td>@item.Reg</td>
                            <td>@item.Sgc</td>
                            <td>@item.Sgn</td>
                            <td>@item.Bdt</td>
                            <td>@item.Krn</td>
                            <td>@item.Act?.ToString("yyyy-MM-dd")</td>
                            <td>@item.Clm</td>
                            <td>@item.Clu</td>
                            <td>@item.Dkg</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Obtén referencias a los elementos
    const searchInput = document.getElementById('searchInput');
    const dateInput = document.getElementById('dateInput');
    const searchButton = document.getElementById('searchButton');
    const clearButton = document.getElementById('clearButton');
    const dataRows = document.getElementById('dataRows');

    // Almacenar los datos originales para restaurarlos después
    const originalData = [...dataRows.children];

    // Función de búsqueda (texto)
    function filterByText() {
        const searchTerm = searchInput.value.trim().toLowerCase();
        const dateTerm = dateInput.value.trim();

        // Filtrar las filas por texto (excluyendo fecha)
        const filteredData = originalData.filter(row => {
            const rowText = Array.from(row.children)
                .map((cell, index) => {
                    // Excluir la columna "ACT" (índice 6) de la búsqueda por texto
                    if (index === 6) return '';  // No buscar en la columna de fecha
                    return cell.textContent.trim().toLowerCase();
                })
                .join(' ');  // Unir todas las celdas en una sola cadena

            const dateMatch = dateTerm ? row.children[6].textContent.trim() === dateTerm : true;

            return rowText.includes(searchTerm) && dateMatch; // Verificar si el texto de la fila y la fecha coinciden
        });

        // Actualizar la tabla con los datos filtrados
        dataRows.innerHTML = '';
        filteredData.forEach(row => dataRows.appendChild(row));
    }

    // Función de búsqueda (fecha)
    function filterByDate() {
        const dateTerm = dateInput.value.trim();

        // Filtrar solo por fecha
        const filteredData = originalData.filter(row => {
            const dateMatch = dateTerm ? row.children[6].textContent.trim() === dateTerm : true;
            return dateMatch;
        });

        // Actualizar la tabla con los datos filtrados
        dataRows.innerHTML = '';
        filteredData.forEach(row => dataRows.appendChild(row));
    }

    // Escuchar el clic en el botón de búsqueda
    searchButton.addEventListener('click', () => {
        if (dateInput.value.trim()) {
            filterByDate(); // Si hay un valor de fecha, filtrar solo por fecha
        } else {
            filterByText(); // Sino, filtrar por texto
        }
    });

    // Función para limpiar los filtros
    clearButton.addEventListener('click', () => {
        searchInput.value = '';
        dateInput.value = '';
        dataRows.innerHTML = '';
        originalData.forEach(row => dataRows.appendChild(row)); // Restaurar datos originales
    });
</script>
 *@


<br />
<div class="container" style="display: flex; justify-content: space-between;">
    <div class="mb-4 text-center" style="flex: 1;">
        <h1 class="display-3 text-secondary" style="font-weight: bold">
            GESTIÓN HSM
        </h1>
        <p class="text-muted">Filtra y encuentra los datos que necesitas de manera rápida y eficiente.</p>
    </div>

    <div class="mb-4 text-center" style="flex: 1;">
        <img src="~/css/excelec_logo.png" alt="Alternate Text" />
        <p class="text-muted">International SAS.</p>
    </div>
</div>



<div class="container">
    <div class="card shadow-sm p-4 mb-4">
        <div class="row g-3">
            <!-- Filtro por texto (excluyendo fecha) -->
            <div class="col-md-6">
                <label for="searchInput" class="form-label">Buscar por cualquier campo</label>
                <input type="text" id="searchInput" class="form-control border-primary" placeholder="Ingresa texto para buscar">
            </div>

            <!-- Filtro de fecha -->
            <div class="col-md-6">
                <label for="dateInput" class="form-label">Buscar por fecha</label>
                <input type="date" id="dateInput" class="form-control border-primary">
            </div>
        </div>

        <div class="row mt-3">
            <!-- Botón de Buscar -->
            <div class="col-md-6">
                <button id="searchButton" class="btn btn-secondary w-100">Buscar</button>
            </div>
            <!-- Botón de Limpiar -->
            <div class="col-md-6">
                <button id="clearButton" class="btn btn-outline-secondary w-100">Limpiar</button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-secondary text-white">
            <h4 class="mb-0 text-center">Resultados</h4>
        </div>
        <div class="card-body p-0">
            <div class="d-flex justify-content-end p-3">
                <!-- Botón para mostrar/ocultar columnas -->
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="columnToggle" data-bs-toggle="dropdown" aria-expanded="false">
                        Mostrar/Ocultar Columnas
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="columnToggle">
                        <li><input type="checkbox" class="column-checkbox" data-column="0" checked> SERIAL HSM</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="1" checked> REG</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="2" checked> SGC</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="3" checked> SGN</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="4" checked> BDT</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="5" checked> KRN</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="6" checked> ACT</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="7" checked> CLM</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="8" checked> CLU</li>
                        <li><input type="checkbox" class="column-checkbox" data-column="9" checked> DKG</li>
                    </ul>
                </div>
            </div>

            <table class="table table-striped table-bordered table-hover table-responsive" id="dataTable">
                <thead class="bg-light">
                    <tr class="text-center">
                        <th data-column="0">SERIAL HSM</th>
                        <th data-column="1">REG </th>
                        <th data-column="2">SGC </th>
                        <th data-column="3">SGN </th>
                        <th data-column="4">BDT </th>
                        <th data-column="5">KRN </th>
                        <th data-column="6">ACT </th>
                        <th data-column="7">CLM </th>
                        <th data-column="8">CLU </th>
                        <th data-column="9">DKG </th>
                    </tr>
                </thead>
                <tbody id="dataRows">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.SerialHsm</td>
                            <td>@item.Reg</td>
                            <td>@item.Sgc</td>
                            <td>@item.Sgn</td>
                            <td>@item.Bdt</td>
                            <td>@item.Krn</td>
                            <td>@item.Act?.ToString("yyyy-MM-dd")</td>
                            <td>@item.Clm</td>
                            <td>@item.Clu</td>
                            <td>@item.Dkg</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Función para mostrar/ocultar columnas
    document.querySelectorAll('.column-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const column = this.getAttribute('data-column');
            const table = document.getElementById('dataTable');

            table.querySelectorAll(`th[data-column="${column}"], td:nth-child(${parseInt(column) + 1})`).forEach(cell => {
                cell.style.display = this.checked ? '' : 'none';
            });
        });
    });

    // Función para ordenar columnas
    document.querySelectorAll('#dataTable th').forEach(header => {
        header.addEventListener('click', function() {
            const column = this.getAttribute('data-column');
            const table = document.getElementById('dataTable');
            const rows = Array.from(table.querySelector('tbody').rows);
            const ascending = !this.classList.contains('ascending');

            rows.sort((a, b) => {
                const aText = a.cells[column].textContent.trim();
                const bText = b.cells[column].textContent.trim();
                return ascending ? aText.localeCompare(bText) : bText.localeCompare(aText);
            });

            table.querySelector('tbody').innerHTML = '';
            rows.forEach(row => table.querySelector('tbody').appendChild(row));

            table.querySelectorAll('th').forEach(th => th.classList.remove('ascending', 'descending'));
            this.classList.add(ascending ? 'ascending' : 'descending');
        });
    });
</script>



