@model List<HSM2.Models.HsmData>

@{
    ViewData["Title"] = "HSM";
}

<div class="text-center mb-4">
    <h1 class="display-4 text-primary" style="font-weight: bold;">Gestión HSM</h1>
    <p class="text-muted">Filtra y encuentra los datos que necesitas de manera rápida y eficiente.</p>
</div>

<div class="container">
    <div class="card shadow-sm p-4 mb-4">
        <div class="row g-3">
            <!-- Filtro por texto (excluyendo fecha) -->
            <div class="col-md-6">
                <label for="searchInput" class="form-label">Buscar por cualquier campo</label>
                <input type="text" id="searchInput" class="form-control border-primary" placeholder="Ingresa texto para buscar">
            </div>

            <!-- Filtro de fecha -->
            <div class="col-md-6">
                <label for="dateInput" class="form-label">Buscar por fecha</label>
                <input type="date" id="dateInput" class="form-control border-primary">
            </div>
        </div>

        <div class="row mt-3">
            <!-- Botón de Buscar -->
            <div class="col-md-6">
                <button id="searchButton" class="btn btn-primary w-100">Buscar</button>
            </div>
            <!-- Botón de Limpiar -->
            <div class="col-md-6">
                <button id="clearButton" class="btn btn-outline-secondary w-100">Limpiar</button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0 text-center">Resultados</h4>
        </div>
        <div class="card-body p-0">
            <table class="table table-striped table-bordered table-hover table-responsive">
                <thead class="bg-light">
                    <tr class="text-center">
                        <th>SERIAL HSM</th>
                        <th>Reg</th>
                        <th>SGC</th>
                        <th>SGN</th>
                        <th>BDT</th>
                        <th>KRN</th>
                        <th>ACT</th>
                        <th>CLM</th>
                        <th>CLU</th>
                        <th>DKG</th>
                    </tr>
                </thead>
                <tbody id="dataRows">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.SerialHsm</td>
                            <td>@item.Reg</td>
                            <td>@item.Sgc</td>
                            <td>@item.Sgn</td>
                            <td>@item.Bdt</td>
                            <td>@item.Krn</td>
                            <td>@item.Act?.ToString("yyyy-MM-dd")</td>
                            <td>@item.Clm</td>
                            <td>@item.Clu</td>
                            <td>@item.Dkg</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Obtén referencias a los elementos
    const searchInput = document.getElementById('searchInput');
    const dateInput = document.getElementById('dateInput');
    const searchButton = document.getElementById('searchButton');
    const clearButton = document.getElementById('clearButton');
    const dataRows = document.getElementById('dataRows');

    // Almacenar los datos originales para restaurarlos después
    const originalData = [...dataRows.children];

    // Función de búsqueda (texto)
    function filterByText() {
        const searchTerm = searchInput.value.trim().toLowerCase();
        const dateTerm = dateInput.value.trim();

        // Filtrar las filas por texto (excluyendo fecha)
        const filteredData = originalData.filter(row => {
            const rowText = Array.from(row.children)
                .map((cell, index) => {
                    // Excluir la columna "ACT" (índice 6) de la búsqueda por texto
                    if (index === 6) return '';  // No buscar en la columna de fecha
                    return cell.textContent.trim().toLowerCase();
                })
                .join(' ');  // Unir todas las celdas en una sola cadena

            const dateMatch = dateTerm ? row.children[6].textContent.trim() === dateTerm : true;

            return rowText.includes(searchTerm) && dateMatch; // Verificar si el texto de la fila y la fecha coinciden
        });

        // Actualizar la tabla con los datos filtrados
        dataRows.innerHTML = '';
        filteredData.forEach(row => dataRows.appendChild(row));
    }

    // Función de búsqueda (fecha)
    function filterByDate() {
        const dateTerm = dateInput.value.trim();

        // Filtrar solo por fecha
        const filteredData = originalData.filter(row => {
            const dateMatch = dateTerm ? row.children[6].textContent.trim() === dateTerm : true;
            return dateMatch;
        });

        // Actualizar la tabla con los datos filtrados
        dataRows.innerHTML = '';
        filteredData.forEach(row => dataRows.appendChild(row));
    }

    // Escuchar el clic en el botón de búsqueda
    searchButton.addEventListener('click', () => {
        if (dateInput.value.trim()) {
            filterByDate(); // Si hay un valor de fecha, filtrar solo por fecha
        } else {
            filterByText(); // Sino, filtrar por texto
        }
    });

    // Función para limpiar los filtros
    clearButton.addEventListener('click', () => {
        searchInput.value = '';
        dateInput.value = '';
        dataRows.innerHTML = '';
        originalData.forEach(row => dataRows.appendChild(row)); // Restaurar datos originales
    });
</script>
